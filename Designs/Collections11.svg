<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than draw.io -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="3460px" height="2831px" viewBox="-0.5 -0.5 3460 2831" content="&lt;mxfile host=&quot;app.diagrams.net&quot; agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36&quot; version=&quot;24.7.8&quot;&gt;&#10;  &lt;diagram name=&quot;Page-1&quot; id=&quot;47oXK7FBti_TUQtZJW_Z&quot;&gt;&#10;    &lt;mxGraphModel dx=&quot;5670&quot; dy=&quot;2230&quot; grid=&quot;1&quot; gridSize=&quot;10&quot; guides=&quot;1&quot; tooltips=&quot;1&quot; connect=&quot;1&quot; arrows=&quot;1&quot; fold=&quot;1&quot; page=&quot;1&quot; pageScale=&quot;1&quot; pageWidth=&quot;850&quot; pageHeight=&quot;1100&quot; math=&quot;0&quot; shadow=&quot;0&quot;&gt;&#10;      &lt;root&gt;&#10;        &lt;mxCell id=&quot;0&quot; /&gt;&#10;        &lt;mxCell id=&quot;1&quot; parent=&quot;0&quot; /&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-103&quot; value=&quot;&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;&quot; parent=&quot;1&quot; source=&quot;tjRPH40bdEeJ9Ab9AIvT-1&quot; target=&quot;tjRPH40bdEeJ9Ab9AIvT-6&quot; edge=&quot;1&quot;&gt;&#10;          &lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-1&quot; value=&quot;ITERABLE&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;strokeColor=#7DFF26;fillColor=#69FF33;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-260&quot; y=&quot;50&quot; width=&quot;220&quot; height=&quot;40&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-2&quot; value=&quot;LIST&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#68FF57;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-1630&quot; y=&quot;410&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-3&quot; value=&quot;Set&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#48FF24;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;800&quot; y=&quot;400&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-5&quot; value=&quot;Queue&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#47FF33;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-205&quot; y=&quot;400&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-6&quot; value=&quot;COLLECTION&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#69FF29;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-260&quot; y=&quot;140&quot; width=&quot;220&quot; height=&quot;40&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-7&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;rounded=0;&quot; parent=&quot;1&quot; edge=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-1580&quot; y=&quot;240&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;860&quot; y=&quot;240&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-13&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; source=&quot;tjRPH40bdEeJ9Ab9AIvT-1&quot; target=&quot;tjRPH40bdEeJ9Ab9AIvT-6&quot; edge=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-330&quot; y=&quot;340&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-280&quot; y=&quot;290&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-44&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;entryX=0.422;entryY=-0.069;entryDx=0;entryDy=0;entryPerimeter=0;&quot; parent=&quot;1&quot; target=&quot;tjRPH40bdEeJ9Ab9AIvT-3&quot; edge=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;850&quot; y=&quot;250&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;1630&quot; y=&quot;440&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-48&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; parent=&quot;1&quot; edge=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;1820&quot; y=&quot;400&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;1820&quot; y=&quot;480&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-62&quot; value=&quot;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;ArrayList:&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;ArrayList is a resizable array implementation of the List interface in Java.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;It is part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Dynamic Sizing: Unlike arrays, ArrayList can grow and shrink dynamically.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Element Type: Can store objects of any type (including null values).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Order: Maintains the order of elements in the sequence they are added.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Access Time: Provides fast random access to elements (O(1) time complexity for get and set operations).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion and Removal: Adding or removing elements can be slower (O(n) time complexity) because it may involve shifting elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Index-Based: Elements are accessed by zero-based index.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Capacity: Internally, it uses an array, and its capacity is increased automatically as needed.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;add(E e): Appends the specified element to the end.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;add(int index, E element): Inserts the specified element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;get(int index): Returns the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;set(int index, E element): Replaces the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(int index): Removes the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of elements in the list.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all elements from the list.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-1365&quot; y=&quot;560&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-64&quot; value=&quot;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Vector:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Vector is a dynamic array that implements the List interface and is part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Dynamic Sizing: Like ArrayList, Vector can grow and shrink dynamically.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Element Type: Can store objects of any type (including null values).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Order: Maintains the order of elements in the sequence they are added.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Access Time: Provides fast random access to elements (O(1) time complexity for get and set operations).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion and Removal: Similar to ArrayList, adding or removing elements can be slower (O(n) time complexity) due to shifting elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Capacity: Internally uses an array; its capacity is increased automatically as needed.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Synchronization: Unlike ArrayList, Vector is synchronized, making it thread-safe but potentially slower due to the overhead of synchronization.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;add(E e): Appends the specified element to the end.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;add(int index, E element): Inserts the specified element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;get(int index): Returns the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;set(int index, E element): Replaces the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;remove(int index): Removes the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;size(): Returns the number of elements in the vector.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;clear(): Removes all elements from the vector.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;capacity(): Returns the current capacity of the vector.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;Thread Safety: Provides synchronized methods to ensure thread safety. Each method call is thread-safe, but this can lead to performance issues in highly concurrent environments.&amp;lt;/li&amp;gt;&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;Legacy Status: Part of the original version of Java, and has been largely replaced by ArrayList in newer codebases due to ArrayList&amp;#39;s better performance in single-threaded scenarios.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-1360&quot; y=&quot;1760&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-76&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;entryX=0.422;entryY=-0.022;entryDx=0;entryDy=0;entryPerimeter=0;&quot; parent=&quot;1&quot; target=&quot;tjRPH40bdEeJ9Ab9AIvT-2&quot; edge=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-1579&quot; y=&quot;240&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;160&quot; y=&quot;720&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-84&quot; value=&quot;Map&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#80FF2B;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-205&quot; y=&quot;1960&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-94&quot; value=&quot;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Stack:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Definition: Stack is a collection that represents a last-in, first-out (LIFO) stack of objects. It extends Vector and is part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Order: Elements are added and removed in a last-in, first-out order. The most recently added element is the first to be removed.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Inheritance: Stack extends Vector, so it inherits all the methods from Vector, but it is primarily used for stack operations.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;push(E item): Pushes an item onto the top of the stack.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;pop(): Removes and returns the item at the top of the stack. Throws EmptyStackException if the stack is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;peek(): Returns the item at the top of the stack without removing it. Throws EmptyStackException if the stack is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;empty(): Checks if the stack is empty. Returns true if it is empty, false otherwise.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;search(Object o): Returns the 1-based position of the object from the top of the stack. Returns -1 if the object is not found.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Thread Safety: Stack is synchronized, so it is thread-safe, but this can introduce performance overhead.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Capacity: Internally uses a vector, so it grows dynamically as needed.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Legacy Status: Part of the original version of Java. While still supported, it is considered somewhat outdated compared to newer alternatives like Deque implementations (ArrayDeque), which offer stack operations with better performance characteristics&amp;lt;b&amp;gt;.&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-1360&quot; y=&quot;2360&quot; width=&quot;510&quot; height=&quot;510&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;tjRPH40bdEeJ9Ab9AIvT-97&quot; value=&quot;DQueue&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#60FF26;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-770&quot; y=&quot;630&quot; width=&quot;220&quot; height=&quot;70&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-1&quot; value=&quot;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;LinkedList:&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;li&amp;gt;LinkedList is a doubly linked list implementation of the List and Deque interfaces, and it is part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Structure: Consists of nodes where each node contains a data element and references to the previous and next nodes in the sequence.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Dynamic Sizing: Can grow and shrink dynamically, similar to ArrayList.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Element Type: Can store objects of any type (including null values).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Order: Maintains the order of elements based on their insertion sequence.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Access Time: Provides linear time complexity (O(n)) for access operations (get and set) because it requires traversal from the start (or end) to the specified index.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion and Removal: Efficient at adding and removing elements, especially at the beginning or end of the list (O(1) time complexity) compared to ArrayList, which requires shifting elements.&amp;lt;/li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;li&amp;gt;add(E e): Appends the specified element to the end of the list.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;add(int index, E element): Inserts the specified element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;get(int index): Returns the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;set(int index, E element): Replaces the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(int index): Removes the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of elements in the list.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all elements from the list.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;addFirst(E e): Inserts the specified element at the beginning of the list.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;addLast(E e): Appends the specified element to the end of the list.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;removeFirst(): Removes and returns the first element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;removeLast(): Removes and returns the last element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;peekFirst(): Returns the first element without removing it.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;peekLast(): Returns the last element without removing it.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Iteration: Can be iterated using a for-each loop, iterator, or list iterator.&amp;lt;br&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-1360&quot; y=&quot;1160&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-2&quot; value=&quot;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;ArrayList:&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;ArrayList is a resizable array implementation of the List interface in Java.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;It is part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Dynamic Sizing: Unlike arrays, ArrayList can grow and shrink dynamically.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Element Type: Can store objects of any type (including null values).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Order: Maintains the order of elements in the sequence they are added.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Access Time: Provides fast random access to elements (O(1) time complexity for get and set operations).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion and Removal: Adding or removing elements can be slower (O(n) time complexity) because it may involve shifting elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Index-Based: Elements are accessed by zero-based index.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Capacity: Internally, it uses an array, and its capacity is increased automatically as needed.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;add(E e): Appends the specified element to the end.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;add(int index, E element): Inserts the specified element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;get(int index): Returns the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;set(int index, E element): Replaces the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(int index): Removes the element at the specified position.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of elements in the list.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all elements from the list.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-600&quot; y=&quot;1520&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-3&quot; value=&quot;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;PriorityQueue:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;PriorityQueue is a class in the Java Collections Framework that implements a priority queue. It is part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;The elements in a PriorityQueue are ordered according to their natural ordering or by a Comparator provided at queue construction time.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;It does not guarantee that elements with the same priority are processed in the order they are added.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Internally, it uses a binary heap to maintain the priority of elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Can store objects of any type that implements Comparable or is used with a Comparator.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;The element with the highest priority (according to the specified ordering) is at the head of the queue.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion: O(log n) time complexity for inserting elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;O(log n) time complexity for removing the highest-priority element.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;add(E e): Inserts the specified element into the priority queue. Equivalent to offer.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;offer(E e): Inserts the specified element into the priority queue. Returns true if the element was added successfully.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;peek(): Retrieves but does not remove the highest-priority element, or returns null if the queue is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;poll(): Retrieves and removes the highest-priority element, or returns null if the queue is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(Object o): Removes a single instance of the specified element from the queue, if present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of elements in the queue.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all elements from the queue.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;comparator(): Returns the Comparator used to order the elements in this queue, or null if the queue is ordered according to the natural ordering of its elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;PriorityQueue is not synchronized. If multiple threads access a PriorityQueue concurrently and at least one thread modifies it, it must be synchronized externally.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;20&quot; y=&quot;600&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-4&quot; value=&quot;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;ArrayDeque&amp;lt;/b&amp;gt;&amp;lt;span style=&amp;quot;background-color: initial;&amp;quot;&amp;gt;&amp;amp;nbsp;:&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;li&amp;gt;ArrayDeque in Java&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Definition: ArrayDeque is a class in the Java Collections Framework that implements a double-ended queue (deque). It is part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Internally backed by an array that dynamically grows as needed.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Allows elements to be added and removed from both ends of the queue efficiently.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Can store objects of any type (including null values, though it&amp;#39;s generally advised to avoid null elements for consistency).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Maintains the order of elements based on their insertion sequence. Elements added to the front are accessible from the front, and elements added to the rear are accessible from the rear.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion/Removal at Ends: O(1) time complexity for operations at both ends (e.g., addFirst, addLast, removeFirst, removeLast).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Access by Index: O(n) time complexity, as it may require traversing the deque.&amp;lt;/li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;li&amp;gt;addFirst(E e): Inserts the specified element at the front of the deque.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;addLast(E e): Inserts the specified element at the end of the deque.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;offerFirst(E e): Inserts the specified element at the front of the deque, returns true if successful.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;offerLast(E e): Inserts the specified element at the end of the deque, returns true if successful.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;peekFirst(): Retrieves but does not remove the first element, or returns null if the deque is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;peekLast(): Retrieves but does not remove the last element, or returns null if the deque is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;pollFirst(): Retrieves and removes the first element, or returns null if the deque is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;pollLast(): Retrieves and removes the last element, or returns null if the deque is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;removeFirst(): Removes and returns the first element,&amp;amp;nbsp;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;removeLast(): Removes and returns the last element, throws NoSuchElementException if the deque is empty.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of elements in the deque.&amp;lt;/li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-610&quot; y=&quot;880&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-7&quot; value=&quot;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;HashSet:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;HashSet in Java&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Definition: HashSet is a collection class that implements the Set interface, part of the Java Collections Framework. It is backed by a hash table.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Can store objects of any type (including null values).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Does not guarantee any specific order of elements. The order can appear random and is based on the hash codes of the If you need a predictable order, consider using LinkedHashSet, which maintains insertion order.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion/Removal: Average O(1) time complexity for add, remove, and contains operations due to the hash table.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Iteration: O(n) time complexity, where n is the number of elements in the set&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;a&amp;lt;/b&amp;gt;dd(E e): Adds the specified element to the set if it is not already present. Returns true if the set did not already contain the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(Object o): Removes the specified element from the set if it is present. Returns true if the set contained the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;contains(Object o): Checks if the set contains the specified element. Returns true if the set contains the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of elements in the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all elements from the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;isEmpty(): Checks if the set is empty. Returns true if the set contains no elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;iterator(): Returns an iterator over the elements in the set.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;930&quot; y=&quot;530&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-8&quot; value=&quot;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;LinkedHashSet:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;LinkedHashSet is a class that implements the Set interface, combining the functionality of a HashSet with a linked list to maintain insertion order. It is part of the Java Collections Framework and is located in the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Internally, LinkedHashSet uses a hash table (for fast lookups) and a linked list (to maintain the order of elements).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Can store objects of any type (including null values).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Ordering:&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Maintains the order of elements based on their insertion sequence. The order is predictable and is the same as the order in which elements were added to the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion/Removal: Average O(1) time complexity for add, remove, and contains operations due to the hash table.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;O(n) time complexity for iteration over the elements, where n is the number of elements in the set. Iteration is consistent with the insertion order.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;add(E e): Adds the specified element to the set if it is not already present. Returns true if the set did not already contain the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(Object o): Removes the specified element from the set if it is present. Returns true if the set contained the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;contains(Object o): Checks if the set contains the specified element. Returns true if the set contains the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of elements in the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all elements from the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;isEmpty(): Checks if the set is empty. Returns true if the set contains no elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;iterator(): Returns an iterator over the elements in the set in insertion order&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;930&quot; y=&quot;1120&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-9&quot; value=&quot;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;TreeSet:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;li&amp;gt;Provides methods to access elements in a sorted order.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Internally, TreeSet uses a Red-Black Tree (a self-balancing binary search tree) to maintain elements in a sorted order.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Can store objects of any type that implements the Comparable interface or is used with a Comparator.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion/Removal: O(log n) time complexity for add, remove, and contains operations due to the underlying Red-Black Tree structure.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;O(log n) time complexity for operations like first, last, floor, ceiling, and higher due to the sorted nature of the set.&amp;lt;/li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;li&amp;gt;add(E e): Adds the specified element to the set if it is not already present. Returns true if the set did not already contain the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(Object o): Removes the specified element from the set if it is present. Returns true if the set contained the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;contains(Object o): Checks if the set contains the specified element. Returns true if the set contains the element.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of elements in the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all elements from the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;isEmpty(): Checks if the set is empty. Returns true if the set contains no elements.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;first(): Returns the first (lowest) element in the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;last(): Returns the last (highest) element in the set.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;headSet(E toElement): Returns a view of the portion of the set whose elements are strictly less than toElement.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;tailSet(E fromElement): Returns a view of the portion of the set whose elements are greater than or equal to fromElement.&amp;lt;/li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;930&quot; y=&quot;1700&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-10&quot; value=&quot;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;HashTable:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Hashtable is a class that implements the Map interface, part of the Java Collections Framework. It represents a collection of key-value pairs.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Does not guarantee any specific order of elements. The order can appear random due to the underlying hash table.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Internally uses a hash table (array of linked lists) to store key-value pairs.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Keys and values can be of any object type.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Neither keys nor values can be null. If you try to add a null key or value, it will throw a NullPointerException.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion/Lookup/Removal: Average O(1) time complexity for operations like put, get, and remove due to the hash table structure.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Iteration: O(n) time complexity for iteration over the entries, where n is the number of key-value pairs.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;put(K key, V value): Associates the specified value with the specified key. Returns the previous value associated with the key, or null if there was no mapping for the key.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;get(Object key): Returns the value associated with the specified key, or null if the key is not present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(Object key): Removes the mapping for the specified key from the table if present. Returns the value that was associated with the key, or null if the key was not present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;containsKey(Object key): Checks if the table contains a mapping for the specified key. Returns true if the key is present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;containsValue(Object value): Checks if the table maps one or more keys to the specified value. Returns true if the value is present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of key-value mappings in the table.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all mappings from the table.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;isEmpty(): Checks if the table is empty. Returns true if the table contains no key-value mappings.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;keys(): Returns an enumeration of the keys in the table.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;elements(): Returns an enumeration of the values in the table.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-680&quot; y=&quot;2340&quot; width=&quot;510&quot; height=&quot;510&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-11&quot; value=&quot;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;HashMap:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;HashMap is a class that implements the Map interface, part of the Java Collections Framework. It represents a collection of key-value pairs.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Package: Part of the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Does not guarantee any specific order of elements. The order can appear random due to the underlying hash table.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Internally uses a hash table (array of buckets) to store key-value pairs.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Keys and values can be of any type (including null values).&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;A HashMap allows one null key and multiple null values.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion/Lookup/Removal: Average O(1) time complexity for put, get, and remove operations due to the hash table structure.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;O(n) time complexity for iteration over the entries, where n is the number of key-value pairs.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Methods:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;put(K key, V value): Associates the specified value with the specified key. Returns the previous value associated with the key, or null if there was no mapping for the key.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;get(Object key): Returns the value associated with the specified key, or null if the key is not present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(Object key): Removes the mapping for the specified key from the map if present. Returns the value that was associated with the key, or null if the key was not present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;containsKey(Object key): Checks if the map contains a mapping for the specified key. Returns true if the key is present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;containsValue(Object value): Checks if the map maps one or more keys to the specified value. Returns true if the value is present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of key-value mappings in the map.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all mappings from the map.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;isEmpty(): Checks if the map is empty. Returns true if the map contains no key-value mappings.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;keySet(): Returns a Set view of the keys contained in the map.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;values(): Returns a Collection view of the values contained in the map.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;entrySet(): Returns a Set view of the mappings contained in the map.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-100&quot; y=&quot;2360&quot; width=&quot;520&quot; height=&quot;520&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-12&quot; value=&quot;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;TreeMap:&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;TreeMap is a class that implements the NavigableMap interface, which extends the SortedMap interface. It is part of the Java Collections Framework and is located in the java.util package.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Sorted Order: Entries in a TreeMap are stored in a sorted order based on the natural ordering of the keys or by a Comparator provided at the time of map creation.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;SortedMap Interface: Provides methods to access entries in a sorted order.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Internally uses a Red-Black Tree (a self-balancing binary search tree) to maintain key-value pairs in sorted order.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Keys and values can be of any type, but keys must be comparable, either by implementing the Comparable interface or by providing a Comparator when creating the TreeMap.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Insertion/Lookup/Removal: O(log n) time complexity for operations like put, get, and remove due to the underlying Red-Black Tree structure.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Iteration: O(n) time complexity for iteration over the entries, where n is the number of key-value pairs. Iteration is consistent with the sorted order of keys.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;Methods:&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;put(K key, V value): Associates the specified value with the specified key. Returns the previous value associated with the key, or null if there was no mapping for the key.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;get(Object key): Returns the value associated with the specified key, or null if the key is not present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;remove(Object key): Removes the mapping for the specified key from the map if present. Returns the value that was associated with the key, or null if the key was not present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;containsKey(Object key): Checks if the map contains a mapping for the specified key. Returns true if the key is present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;containsValue(Object value): Checks if the map maps one or more keys to the specified value. Returns true if the value is present.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;size(): Returns the number of key-value mappings in the map.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;clear(): Removes all mappings from the map.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;fillColor=#FFFFFF;align=left;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;550&quot; y=&quot;2350&quot; width=&quot;510&quot; height=&quot;510&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-14&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-1570&quot; y=&quot;2070&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-1570&quot; y=&quot;475.555419921875&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-15&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-1570&quot; y=&quot;2070&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-1370&quot; y=&quot;2070&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-16&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;tjRPH40bdEeJ9Ab9AIvT-64&quot; target=&quot;tjRPH40bdEeJ9Ab9AIvT-94&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-620&quot; y=&quot;2330&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-570&quot; y=&quot;2280&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-17&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-1580&quot; y=&quot;1430&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-1370&quot; y=&quot;1430&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-18&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; target=&quot;tjRPH40bdEeJ9Ab9AIvT-62&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-1570&quot; y=&quot;810&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-570&quot; y=&quot;1130&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-20&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-670&quot; y=&quot;520&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;320&quot; y=&quot;520&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-21&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;exitX=0.384;exitY=1.045;exitDx=0;exitDy=0;exitPerimeter=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;tjRPH40bdEeJ9Ab9AIvT-5&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-160&quot; y=&quot;540&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-159&quot; y=&quot;510&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-22&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;entryX=0.455;entryY=0;entryDx=0;entryDy=0;entryPerimeter=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; target=&quot;tjRPH40bdEeJ9Ab9AIvT-97&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-670&quot; y=&quot;520&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-110&quot; y=&quot;490&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-23&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;316&quot; y=&quot;520&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;316&quot; y=&quot;596&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-24&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-150&quot; y=&quot;240&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-150&quot; y=&quot;400&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-26&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-680&quot; y=&quot;710&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-680&quot; y=&quot;1840&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-27&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-680&quot; y=&quot;1840&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-610&quot; y=&quot;1840&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-28&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;exitX=0.006;exitY=0.544;exitDx=0;exitDy=0;exitPerimeter=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;t4OP4L_AowM52m6YvEKI-4&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-20&quot; y=&quot;1330&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-680&quot; y=&quot;1160&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-30&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;rounded=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; target=&quot;tjRPH40bdEeJ9Ab9AIvT-3&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;840&quot; y=&quot;2000&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;470&quot; y=&quot;980&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-31&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;850&quot; y=&quot;2000&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;920&quot; y=&quot;2000&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-32&quot; value=&quot;Maps&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#47FF33;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-10&quot; y=&quot;2160&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-33&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-520&quot; y=&quot;2280&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;800&quot; y=&quot;2280&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-34&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;entryX=0.296;entryY=-0.007;entryDx=0;entryDy=0;entryPerimeter=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; target=&quot;t4OP4L_AowM52m6YvEKI-10&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;-530&quot; y=&quot;2280&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;-380&quot; y=&quot;2340&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-35&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;160&quot; y=&quot;2280&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;160&quot; y=&quot;2350&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;t4OP4L_AowM52m6YvEKI-36&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;rounded=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;mxPoint x=&quot;800&quot; y=&quot;2280&quot; as=&quot;sourcePoint&quot; /&gt;&#10;            &lt;mxPoint x=&quot;800&quot; y=&quot;2340&quot; as=&quot;targetPoint&quot; /&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;      &lt;/root&gt;&#10;    &lt;/mxGraphModel&gt;&#10;  &lt;/diagram&gt;&#10;&lt;/mxfile&gt;&#10;"><defs/><g><g data-cell-id="0"><g data-cell-id="1"><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-103"><g><path d="M 1480 40 L 1480 83.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1480 88.88 L 1476.5 81.88 L 1480 83.63 L 1483.5 81.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-1"><g><rect x="1370" y="0" width="220" height="40" fill="#69ff33" stroke="#7dff26" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 218px; height: 1px; padding-top: 20px; margin-left: 1371px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">ITERABLE</div></div></div></foreignObject><text x="1480" y="24" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">ITERABLE</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-2"><g><rect x="0" y="360" width="120" height="60" fill="#68ff57" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 390px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">LIST</div></div></div></foreignObject><text x="60" y="394" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">LIST</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-3"><g><rect x="2430" y="350" width="120" height="60" fill="#48ff24" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 380px; margin-left: 2431px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Set</div></div></div></foreignObject><text x="2490" y="384" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Set</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-5"><g><rect x="1425" y="350" width="120" height="60" fill="#47ff33" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 380px; margin-left: 1426px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Queue</div></div></div></foreignObject><text x="1485" y="384" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Queue</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-6"><g><rect x="1370" y="90" width="220" height="40" fill="#69ff29" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 218px; height: 1px; padding-top: 110px; margin-left: 1371px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">COLLECTION</div></div></div></foreignObject><text x="1480" y="114" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">COLLECTION</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-7"><g><path d="M 50 190 L 2490 190" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-13"><g><path d="M 1480 40 L 1480 83.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1480 88.88 L 1476.5 81.88 L 1480 83.63 L 1483.5 81.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-44"><g><path d="M 2480 200 L 2480.61 339.49" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2480.64 344.74 L 2477.1 337.76 L 2480.61 339.49 L 2484.1 337.73 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-48"><g><path d="M 3450 350 L 3450 423.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3450 428.88 L 3446.5 421.88 L 3450 423.63 L 3453.5 421.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-62"><g><rect x="265" y="510" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 770px; margin-left: 267px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><div><b>ArrayList:</b><br /></div><ul><li>ArrayList is a resizable array implementation of the List interface in Java.</li><li>It is part of the java.util package.</li><li>Dynamic Sizing: Unlike arrays, ArrayList can grow and shrink dynamically.</li><li>Element Type: Can store objects of any type (including null values).</li><li>Order: Maintains the order of elements in the sequence they are added.</li><li>Access Time: Provides fast random access to elements (O(1) time complexity for get and set operations).</li><li>Insertion and Removal: Adding or removing elements can be slower (O(n) time complexity) because it may involve shifting elements.</li><li>Index-Based: Elements are accessed by zero-based index.</li><li>Capacity: Internally, it uses an array, and its capacity is increased automatically as needed.</li></ul><div><b>Methods:</b></div></div><div><b><br /></b></div><div><div><ul><li>add(E e): Appends the specified element to the end.</li><li>add(int index, E element): Inserts the specified element at the specified position.</li><li>get(int index): Returns the element at the specified position.</li><li>set(int index, E element): Replaces the element at the specified position.</li><li>remove(int index): Removes the element at the specified position.</li><li>size(): Returns the number of elements in the list.</li><li>clear(): Removes all elements from the list.</li></ul></div></div></div></div></div></foreignObject><text x="267" y="774" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">ArrayList:...</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-64"><g><rect x="270" y="1710" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 518px; height: 1px; padding-top: 1970px; margin-left: 271px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><div style="text-align: justify;"><div><b>Vector:</b></div><ul><li>Vector is a dynamic array that implements the List interface and is part of the java.util package.</li><li>Dynamic Sizing: Like ArrayList, Vector can grow and shrink dynamically.</li><li>Element Type: Can store objects of any type (including null values).</li><li>Order: Maintains the order of elements in the sequence they are added.</li><li>Access Time: Provides fast random access to elements (O(1) time complexity for get and set operations).</li><li>Insertion and Removal: Similar to ArrayList, adding or removing elements can be slower (O(n) time complexity) due to shifting elements.</li><li>Capacity: Internally uses an array; its capacity is increased automatically as needed.</li><li>Synchronization: Unlike ArrayList, Vector is synchronized, making it thread-safe but potentially slower due to the overhead of synchronization.</li></ul></div></div><div style="text-align: justify;"><b>Methods:</b></div><div style="text-align: justify;"><div style=""><ul style=""><li style="">add(E e): Appends the specified element to the end.</li><li style="">add(int index, E element): Inserts the specified element at the specified position.</li><li style="">get(int index): Returns the element at the specified position.</li><li style="">set(int index, E element): Replaces the element at the specified position.</li><li style="">remove(int index): Removes the element at the specified position.</li><li style="">size(): Returns the number of elements in the vector.</li><li style="">clear(): Removes all elements from the vector.</li><li style="">capacity(): Returns the current capacity of the vector.</li><li style="">Thread Safety: Provides synchronized methods to ensure thread safety. Each method call is thread-safe, but this can lead to performance issues in highly concurrent environments.</li><li style="">Legacy Status: Part of the original version of Java, and has been largely replaced by ArrayList in newer codebases due to ArrayList's better performance in single-threaded scenarios.</li></ul></div></div></div></div></div></foreignObject><text x="530" y="1974" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Vector:...</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-76"><g><path d="M 51 190 L 50.65 352.31" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 50.64 357.56 L 47.16 350.55 L 50.65 352.31 L 54.16 350.57 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-84"><g><rect x="1425" y="1910" width="120" height="60" fill="#80ff2b" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1940px; margin-left: 1426px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Map</div></div></div></foreignObject><text x="1485" y="1944" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Map</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-94"><g><rect x="270" y="2310" width="510" height="510" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 508px; height: 1px; padding-top: 2565px; margin-left: 272px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><b>Stack:</b></div><ul><li>Definition: Stack is a collection that represents a last-in, first-out (LIFO) stack of objects. It extends Vector and is part of the java.util package.</li><li>Order: Elements are added and removed in a last-in, first-out order. The most recently added element is the first to be removed.</li><li>Inheritance: Stack extends Vector, so it inherits all the methods from Vector, but it is primarily used for stack operations.</li></ul><div><b>Methods:</b></div><div><div style=""><ul><li>push(E item): Pushes an item onto the top of the stack.</li><li>pop(): Removes and returns the item at the top of the stack. Throws EmptyStackException if the stack is empty.</li><li>peek(): Returns the item at the top of the stack without removing it. Throws EmptyStackException if the stack is empty.</li><li>empty(): Checks if the stack is empty. Returns true if it is empty, false otherwise.</li><li>search(Object o): Returns the 1-based position of the object from the top of the stack. Returns -1 if the object is not found.</li><li>Thread Safety: Stack is synchronized, so it is thread-safe, but this can introduce performance overhead.</li><li>Capacity: Internally uses a vector, so it grows dynamically as needed.</li><li>Legacy Status: Part of the original version of Java. While still supported, it is considered somewhat outdated compared to newer alternatives like Deque implementations (ArrayDeque), which offer stack operations with better performance characteristics<b>.</b></li></ul></div></div></div></div></div></foreignObject><text x="272" y="2569" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">Stack:...</text></switch></g></g></g><g data-cell-id="tjRPH40bdEeJ9Ab9AIvT-97"><g><rect x="860" y="580" width="220" height="70" fill="#60ff26" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 218px; height: 1px; padding-top: 615px; margin-left: 861px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">DQueue</div></div></div></foreignObject><text x="970" y="619" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">DQueue</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-1"><g><rect x="270" y="1110" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 1370px; margin-left: 272px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><div><b>LinkedList:</b><br /></div><ul><li><li>LinkedList is a doubly linked list implementation of the List and Deque interfaces, and it is part of the java.util package.</li><li>Structure: Consists of nodes where each node contains a data element and references to the previous and next nodes in the sequence.</li><li>Dynamic Sizing: Can grow and shrink dynamically, similar to ArrayList.</li><li>Element Type: Can store objects of any type (including null values).</li><li>Order: Maintains the order of elements based on their insertion sequence.</li><li>Access Time: Provides linear time complexity (O(n)) for access operations (get and set) because it requires traversal from the start (or end) to the specified index.</li><li>Insertion and Removal: Efficient at adding and removing elements, especially at the beginning or end of the list (O(1) time complexity) compared to ArrayList, which requires shifting elements.</li></li></ul><div><b>Methods:</b></div></div><div><b><br /></b></div><div><ul><li><li>add(E e): Appends the specified element to the end of the list.</li><li>add(int index, E element): Inserts the specified element at the specified position.</li><li>get(int index): Returns the element at the specified position.</li><li>set(int index, E element): Replaces the element at the specified position.</li><li>remove(int index): Removes the element at the specified position.</li><li>size(): Returns the number of elements in the list.</li><li>clear(): Removes all elements from the list.</li><li>addFirst(E e): Inserts the specified element at the beginning of the list.</li><li>addLast(E e): Appends the specified element to the end of the list.</li><li>removeFirst(): Removes and returns the first element.</li><li>removeLast(): Removes and returns the last element.</li><li>peekFirst(): Returns the first element without removing it.</li><li>peekLast(): Returns the last element without removing it.</li><li>Iteration: Can be iterated using a for-each loop, iterator, or list iterator.<br /></li></li></ul></div></div></div></div></foreignObject><text x="272" y="1374" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">LinkedList:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-2"><g><rect x="1030" y="1470" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 1730px; margin-left: 1032px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><div><b>ArrayList:</b><br /></div><ul><li>ArrayList is a resizable array implementation of the List interface in Java.</li><li>It is part of the java.util package.</li><li>Dynamic Sizing: Unlike arrays, ArrayList can grow and shrink dynamically.</li><li>Element Type: Can store objects of any type (including null values).</li><li>Order: Maintains the order of elements in the sequence they are added.</li><li>Access Time: Provides fast random access to elements (O(1) time complexity for get and set operations).</li><li>Insertion and Removal: Adding or removing elements can be slower (O(n) time complexity) because it may involve shifting elements.</li><li>Index-Based: Elements are accessed by zero-based index.</li><li>Capacity: Internally, it uses an array, and its capacity is increased automatically as needed.</li></ul><div><b>Methods:</b></div></div><div><b><br /></b></div><div><div><ul><li>add(E e): Appends the specified element to the end.</li><li>add(int index, E element): Inserts the specified element at the specified position.</li><li>get(int index): Returns the element at the specified position.</li><li>set(int index, E element): Replaces the element at the specified position.</li><li>remove(int index): Removes the element at the specified position.</li><li>size(): Returns the number of elements in the list.</li><li>clear(): Removes all elements from the list.</li></ul></div></div></div></div></div></foreignObject><text x="1032" y="1734" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">ArrayList:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-3"><g><rect x="1650" y="550" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 810px; margin-left: 1652px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style=""><div><b>PriorityQueue:</b></div><ul><li>PriorityQueue is a class in the Java Collections Framework that implements a priority queue. It is part of the java.util package.</li><li>The elements in a PriorityQueue are ordered according to their natural ordering or by a Comparator provided at queue construction time.</li><li>It does not guarantee that elements with the same priority are processed in the order they are added.</li><li>Internally, it uses a binary heap to maintain the priority of elements.</li><li>Can store objects of any type that implements Comparable or is used with a Comparator.</li><li>The element with the highest priority (according to the specified ordering) is at the head of the queue.</li><li>Insertion: O(log n) time complexity for inserting elements.</li><li>O(log n) time complexity for removing the highest-priority element.</li></ul><div><b>Methods:</b></div><div><div style=""><ul><li>add(E e): Inserts the specified element into the priority queue. Equivalent to offer.</li><li>offer(E e): Inserts the specified element into the priority queue. Returns true if the element was added successfully.</li><li>peek(): Retrieves but does not remove the highest-priority element, or returns null if the queue is empty.</li><li>poll(): Retrieves and removes the highest-priority element, or returns null if the queue is empty.</li><li>remove(Object o): Removes a single instance of the specified element from the queue, if present.</li><li>size(): Returns the number of elements in the queue.</li><li>clear(): Removes all elements from the queue.</li><li>comparator(): Returns the Comparator used to order the elements in this queue, or null if the queue is ordered according to the natural ordering of its elements.</li><li>PriorityQueue is not synchronized. If multiple threads access a PriorityQueue concurrently and at least one thread modifies it, it must be synchronized externally.</li></ul></div></div></div></div></div></div></foreignObject><text x="1652" y="814" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">PriorityQueue:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-4"><g><rect x="1020" y="830" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 1090px; margin-left: 1022px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style=""><div><b><br /></b></div><div><b><br /></b></div><div><b>ArrayDeque</b><span style="background-color: initial;"> :</span></div><ul><li><li>ArrayDeque in Java</li><li>Definition: ArrayDeque is a class in the Java Collections Framework that implements a double-ended queue (deque). It is part of the java.util package.</li><li>Internally backed by an array that dynamically grows as needed.</li><li>Allows elements to be added and removed from both ends of the queue efficiently.</li><li>Can store objects of any type (including null values, though it's generally advised to avoid null elements for consistency).</li><li>Maintains the order of elements based on their insertion sequence. Elements added to the front are accessible from the front, and elements added to the rear are accessible from the rear.</li><li>Insertion/Removal at Ends: O(1) time complexity for operations at both ends (e.g., addFirst, addLast, removeFirst, removeLast).</li><li>Access by Index: O(n) time complexity, as it may require traversing the deque.</li></li></ul><div><b>Methods:</b></div><div><div style=""><ul><li><li>addFirst(E e): Inserts the specified element at the front of the deque.</li><li>addLast(E e): Inserts the specified element at the end of the deque.</li><li>offerFirst(E e): Inserts the specified element at the front of the deque, returns true if successful.</li><li>offerLast(E e): Inserts the specified element at the end of the deque, returns true if successful.</li><li>peekFirst(): Retrieves but does not remove the first element, or returns null if the deque is empty.</li><li>peekLast(): Retrieves but does not remove the last element, or returns null if the deque is empty.</li><li>pollFirst(): Retrieves and removes the first element, or returns null if the deque is empty.</li><li>pollLast(): Retrieves and removes the last element, or returns null if the deque is empty.</li><li>removeFirst(): Removes and returns the first element, </li><li>removeLast(): Removes and returns the last element, throws NoSuchElementException if the deque is empty.</li><li>size(): Returns the number of elements in the deque.</li></li></ul></div></div></div></div></div></div></foreignObject><text x="1022" y="1094" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">ArrayDeque :...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-7"><g><rect x="2560" y="480" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 740px; margin-left: 2562px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style=""><div><div><b>HashSet:</b></div><ul><li>HashSet in Java</li><li>Definition: HashSet is a collection class that implements the Set interface, part of the Java Collections Framework. It is backed by a hash table.</li><li>Part of the java.util package.</li><li>Can store objects of any type (including null values).</li><li>Does not guarantee any specific order of elements. The order can appear random and is based on the hash codes of the If you need a predictable order, consider using LinkedHashSet, which maintains insertion order.</li><li>Insertion/Removal: Average O(1) time complexity for add, remove, and contains operations due to the hash table.</li><li>Iteration: O(n) time complexity, where n is the number of elements in the set</li></ul><div><b>Methods:</b></div></div><div><b><br /></b></div><div><div style=""><ul><li><b>a</b>dd(E e): Adds the specified element to the set if it is not already present. Returns true if the set did not already contain the element.</li><li>remove(Object o): Removes the specified element from the set if it is present. Returns true if the set contained the element.</li><li>contains(Object o): Checks if the set contains the specified element. Returns true if the set contains the element.</li><li>size(): Returns the number of elements in the set.</li><li>clear(): Removes all elements from the set.</li><li>isEmpty(): Checks if the set is empty. Returns true if the set contains no elements.</li><li>iterator(): Returns an iterator over the elements in the set.</li></ul></div></div><div><b><br /></b></div><div><br /></div></div></div></div></div></foreignObject><text x="2562" y="744" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">HashSet:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-8"><g><rect x="2560" y="1070" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 1330px; margin-left: 2562px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style=""><div><b>LinkedHashSet:</b></div><ul><li>LinkedHashSet is a class that implements the Set interface, combining the functionality of a HashSet with a linked list to maintain insertion order. It is part of the Java Collections Framework and is located in the java.util package.</li><li>Internally, LinkedHashSet uses a hash table (for fast lookups) and a linked list (to maintain the order of elements).</li><li>Can store objects of any type (including null values).</li><li>Ordering:</li><li>Maintains the order of elements based on their insertion sequence. The order is predictable and is the same as the order in which elements were added to the set.</li><li>Insertion/Removal: Average O(1) time complexity for add, remove, and contains operations due to the hash table.</li><li>O(n) time complexity for iteration over the elements, where n is the number of elements in the set. Iteration is consistent with the insertion order.</li></ul><div><b>Methods:</b></div><div><div style=""><ul><li>add(E e): Adds the specified element to the set if it is not already present. Returns true if the set did not already contain the element.</li><li>remove(Object o): Removes the specified element from the set if it is present. Returns true if the set contained the element.</li><li>contains(Object o): Checks if the set contains the specified element. Returns true if the set contains the element.</li><li>size(): Returns the number of elements in the set.</li><li>clear(): Removes all elements from the set.</li><li>isEmpty(): Checks if the set is empty. Returns true if the set contains no elements.</li><li>iterator(): Returns an iterator over the elements in the set in insertion order</li></ul></div></div></div></div></div></div></foreignObject><text x="2562" y="1334" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">LinkedHashSet:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-9"><g><rect x="2560" y="1650" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 1910px; margin-left: 2562px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style=""><div><b>TreeSet:</b></div><ul><li><li>Provides methods to access elements in a sorted order.</li><li>Internally, TreeSet uses a Red-Black Tree (a self-balancing binary search tree) to maintain elements in a sorted order.</li><li>Can store objects of any type that implements the Comparable interface or is used with a Comparator.</li><li>Insertion/Removal: O(log n) time complexity for add, remove, and contains operations due to the underlying Red-Black Tree structure.</li><li>O(log n) time complexity for operations like first, last, floor, ceiling, and higher due to the sorted nature of the set.</li></li></ul><div><b>Methods:</b></div><div><div style=""><ul><li><li>add(E e): Adds the specified element to the set if it is not already present. Returns true if the set did not already contain the element.</li><li>remove(Object o): Removes the specified element from the set if it is present. Returns true if the set contained the element.</li><li>contains(Object o): Checks if the set contains the specified element. Returns true if the set contains the element.</li><li>size(): Returns the number of elements in the set.</li><li>clear(): Removes all elements from the set.</li><li>isEmpty(): Checks if the set is empty. Returns true if the set contains no elements.</li><li>first(): Returns the first (lowest) element in the set.</li><li>last(): Returns the last (highest) element in the set.</li><li>headSet(E toElement): Returns a view of the portion of the set whose elements are strictly less than toElement.</li><li>tailSet(E fromElement): Returns a view of the portion of the set whose elements are greater than or equal to fromElement.</li></li></ul></div></div></div></div></div></div></foreignObject><text x="2562" y="1914" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">TreeSet:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-10"><g><rect x="950" y="2290" width="510" height="510" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 508px; height: 1px; padding-top: 2545px; margin-left: 952px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><div><b>HashTable:</b></div><ul><li>Hashtable is a class that implements the Map interface, part of the Java Collections Framework. It represents a collection of key-value pairs.</li><li>Does not guarantee any specific order of elements. The order can appear random due to the underlying hash table.</li><li>Internally uses a hash table (array of linked lists) to store key-value pairs.</li><li>Keys and values can be of any object type.</li><li>Neither keys nor values can be null. If you try to add a null key or value, it will throw a NullPointerException.</li><li>Insertion/Lookup/Removal: Average O(1) time complexity for operations like put, get, and remove due to the hash table structure.</li><li>Iteration: O(n) time complexity for iteration over the entries, where n is the number of key-value pairs.</li></ul><div><b>Methods:</b></div></div><div><div style=""><ul><li>put(K key, V value): Associates the specified value with the specified key. Returns the previous value associated with the key, or null if there was no mapping for the key.</li><li>get(Object key): Returns the value associated with the specified key, or null if the key is not present.</li><li>remove(Object key): Removes the mapping for the specified key from the table if present. Returns the value that was associated with the key, or null if the key was not present.</li><li>containsKey(Object key): Checks if the table contains a mapping for the specified key. Returns true if the key is present.</li><li>containsValue(Object value): Checks if the table maps one or more keys to the specified value. Returns true if the value is present.</li><li>size(): Returns the number of key-value mappings in the table.</li><li>clear(): Removes all mappings from the table.</li><li>isEmpty(): Checks if the table is empty. Returns true if the table contains no key-value mappings.</li><li>keys(): Returns an enumeration of the keys in the table.</li><li>elements(): Returns an enumeration of the values in the table.</li></ul></div></div></div></div></div></foreignObject><text x="952" y="2549" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">HashTable:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-11"><g><rect x="1530" y="2310" width="520" height="520" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 2570px; margin-left: 1532px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><div><b>HashMap:</b></div><ul><li>HashMap is a class that implements the Map interface, part of the Java Collections Framework. It represents a collection of key-value pairs.</li><li>Package: Part of the java.util package.</li><li>Does not guarantee any specific order of elements. The order can appear random due to the underlying hash table.</li><li>Internally uses a hash table (array of buckets) to store key-value pairs.</li><li>Keys and values can be of any type (including null values).</li><li>A HashMap allows one null key and multiple null values.</li><li>Insertion/Lookup/Removal: Average O(1) time complexity for put, get, and remove operations due to the hash table structure.</li><li>O(n) time complexity for iteration over the entries, where n is the number of key-value pairs.</li></ul><div><b>Methods:</b></div></div><div><div style=""><ul><li>put(K key, V value): Associates the specified value with the specified key. Returns the previous value associated with the key, or null if there was no mapping for the key.</li><li>get(Object key): Returns the value associated with the specified key, or null if the key is not present.</li><li>remove(Object key): Removes the mapping for the specified key from the map if present. Returns the value that was associated with the key, or null if the key was not present.</li><li>containsKey(Object key): Checks if the map contains a mapping for the specified key. Returns true if the key is present.</li><li>containsValue(Object value): Checks if the map maps one or more keys to the specified value. Returns true if the value is present.</li><li>size(): Returns the number of key-value mappings in the map.</li><li>clear(): Removes all mappings from the map.</li><li>isEmpty(): Checks if the map is empty. Returns true if the map contains no key-value mappings.</li><li>keySet(): Returns a Set view of the keys contained in the map.</li><li>values(): Returns a Collection view of the values contained in the map.</li><li>entrySet(): Returns a Set view of the mappings contained in the map.</li></ul></div></div></div></div></div></foreignObject><text x="1532" y="2574" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">HashMap:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-12"><g><rect x="2180" y="2300" width="510" height="510" fill="#ffffff" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 508px; height: 1px; padding-top: 2555px; margin-left: 2182px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><div><b>TreeMap:</b></div><ul><li>TreeMap is a class that implements the NavigableMap interface, which extends the SortedMap interface. It is part of the Java Collections Framework and is located in the java.util package.</li><li>Sorted Order: Entries in a TreeMap are stored in a sorted order based on the natural ordering of the keys or by a Comparator provided at the time of map creation.</li><li>SortedMap Interface: Provides methods to access entries in a sorted order.</li><li>Internally uses a Red-Black Tree (a self-balancing binary search tree) to maintain key-value pairs in sorted order.</li><li>Keys and values can be of any type, but keys must be comparable, either by implementing the Comparable interface or by providing a Comparator when creating the TreeMap.</li><li>Insertion/Lookup/Removal: O(log n) time complexity for operations like put, get, and remove due to the underlying Red-Black Tree structure.</li><li>Iteration: O(n) time complexity for iteration over the entries, where n is the number of key-value pairs. Iteration is consistent with the sorted order of keys.</li></ul><div>Methods:</div></div><div><div><ul><li>put(K key, V value): Associates the specified value with the specified key. Returns the previous value associated with the key, or null if there was no mapping for the key.</li><li>get(Object key): Returns the value associated with the specified key, or null if the key is not present.</li><li>remove(Object key): Removes the mapping for the specified key from the map if present. Returns the value that was associated with the key, or null if the key was not present.</li><li>containsKey(Object key): Checks if the map contains a mapping for the specified key. Returns true if the key is present.</li><li>containsValue(Object value): Checks if the map maps one or more keys to the specified value. Returns true if the value is present.</li><li>size(): Returns the number of key-value mappings in the map.</li><li>clear(): Removes all mappings from the map.</li></ul></div></div></div></div></div></foreignObject><text x="2182" y="2559" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px">TreeMap:...</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-14"><g><path d="M 60 2020 L 60 425.56" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-15"><g><path d="M 60 2020 L 253.63 2020" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 258.88 2020 L 251.88 2023.5 L 253.63 2020 L 251.88 2016.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-16"><g><path d="M 530 2230 L 528.9 2303.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 528.82 2308.88 L 525.43 2301.83 L 528.9 2303.63 L 532.43 2301.94 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-17"><g><path d="M 50 1380 L 253.63 1380" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 258.88 1380 L 251.88 1383.5 L 253.63 1380 L 251.88 1376.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-18"><g><path d="M 60 760 L 258.63 764.27" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 263.88 764.38 L 256.81 767.73 L 258.63 764.27 L 256.96 760.73 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-20"><g><path d="M 960 470 L 1950 470" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-21"><g><path d="M 1471.08 412.7 L 1471.01 453.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1471 458.88 L 1467.51 451.88 L 1471.01 453.63 L 1474.51 451.89 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-22"><g><path d="M 960 470 L 960.09 573.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 960.1 578.88 L 956.59 571.89 L 960.09 573.63 L 963.59 571.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-23"><g><path d="M 1946 470 L 1946 539.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1946 544.88 L 1942.5 537.88 L 1946 539.63 L 1949.5 537.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-24"><g><path d="M 1480 190 L 1480 343.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1480 348.88 L 1476.5 341.88 L 1480 343.63 L 1483.5 341.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-26"><g><path d="M 950 660 L 950 1790" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-27"><g><path d="M 950 1790 L 1013.63 1790" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1018.88 1790 L 1011.88 1793.5 L 1013.63 1790 L 1011.88 1786.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-28"><g><path d="M 1023.12 1112.88 L 956.36 1110.25" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 951.12 1110.04 L 958.25 1106.82 L 956.36 1110.25 L 957.97 1113.82 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-30"><g><path d="M 2470 1950 L 2490 410" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-31"><g><path d="M 2480 1950 L 2543.63 1950" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2548.88 1950 L 2541.88 1953.5 L 2543.63 1950 L 2541.88 1946.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-32"><g><rect x="1620" y="2110" width="120" height="60" fill="#47ff33" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2140px; margin-left: 1621px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Maps</div></div></div></foreignObject><text x="1680" y="2144" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Maps</text></switch></g></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-33"><g><path d="M 1110 2230 L 2430 2230" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-34"><g><path d="M 1100 2230 L 1100.85 2280.06" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1100.94 2285.31 L 1097.32 2278.37 L 1100.85 2280.06 L 1104.32 2278.25 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-35"><g><path d="M 1790 2230 L 1790 2293.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1790 2298.88 L 1786.5 2291.88 L 1790 2293.63 L 1793.5 2291.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="t4OP4L_AowM52m6YvEKI-36"><g><path d="M 2430 2230 L 2430 2283.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2430 2288.88 L 2426.5 2281.88 L 2430 2283.63 L 2433.5 2281.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g></g></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.drawio.com/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>